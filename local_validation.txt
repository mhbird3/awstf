
c:\svn\awstf>terraform validate
Success! The configuration is valid.


c:\svn\awstf>terraform graph
digraph G {
  rankdir = "RL";
  node [shape = rect, fontname = "sans-serif"];
  "data.aws_ami.rhel" [label="data.aws_ami.rhel"];
  "data.aws_caller_identity.current" [label="data.aws_caller_identity.current"];
  "aws_autoscaling_group.app_asg" [label="aws_autoscaling_group.app_asg"];
  "aws_backup_plan.default" [label="aws_backup_plan.default"];
  "aws_backup_selection.asg" [label="aws_backup_selection.asg"];
  "aws_backup_selection.ec2" [label="aws_backup_selection.ec2"];
  "aws_backup_selection.s3" [label="aws_backup_selection.s3"];
  "aws_backup_vault.default" [label="aws_backup_vault.default"];
  "aws_cloudwatch_metric_alarm.alb_4xx_high" [label="aws_cloudwatch_metric_alarm.alb_4xx_high"];
  "aws_cloudwatch_metric_alarm.cpu_high" [label="aws_cloudwatch_metric_alarm.cpu_high"];
  "aws_cloudwatch_metric_alarm.disk_high" [label="aws_cloudwatch_metric_alarm.disk_high"];
  "aws_cloudwatch_metric_alarm.memory_high" [label="aws_cloudwatch_metric_alarm.memory_high"];
  "aws_iam_role.backup_role" [label="aws_iam_role.backup_role"];
  "aws_iam_role_policy_attachment.backup_policy" [label="aws_iam_role_policy_attachment.backup_policy"];
  "aws_instance.mgmt" [label="aws_instance.mgmt"];
  "aws_internet_gateway.igw" [label="aws_internet_gateway.igw"];
  "aws_launch_template.app_lt" [label="aws_launch_template.app_lt"];
  "aws_lb.app_lb" [label="aws_lb.app_lb"];
  "aws_lb_listener.app_listener" [label="aws_lb_listener.app_listener"];
  "aws_lb_target_group.app_tg" [label="aws_lb_target_group.app_tg"];
  "aws_route_table.public" [label="aws_route_table.public"];
  "aws_route_table_association.mgmt_assoc" [label="aws_route_table_association.mgmt_assoc"];
  "aws_security_group.alb_sg" [label="aws_security_group.alb_sg"];
  "aws_security_group.app_sg" [label="aws_security_group.app_sg"];
  "aws_security_group.mgmt_sg" [label="aws_security_group.mgmt_sg"];
  "aws_subnet.app_subnet_az1" [label="aws_subnet.app_subnet_az1"];
  "aws_subnet.app_subnet_az2" [label="aws_subnet.app_subnet_az2"];
  "aws_subnet.backend_subnet" [label="aws_subnet.backend_subnet"];
  "aws_subnet.mgmt_subnet" [label="aws_subnet.mgmt_subnet"];
  "aws_vpc.main" [label="aws_vpc.main"];
  "aws_autoscaling_group.app_asg" -> "aws_launch_template.app_lt";
  "aws_autoscaling_group.app_asg" -> "aws_lb_target_group.app_tg";
  "aws_autoscaling_group.app_asg" -> "aws_subnet.app_subnet_az1";
  "aws_autoscaling_group.app_asg" -> "aws_subnet.app_subnet_az2";
  "aws_backup_plan.default" -> "aws_backup_vault.default";
  "aws_backup_selection.asg" -> "data.aws_caller_identity.current";
  "aws_backup_selection.asg" -> "aws_autoscaling_group.app_asg";
  "aws_backup_selection.asg" -> "aws_backup_plan.default";
  "aws_backup_selection.asg" -> "aws_iam_role.backup_role";
  "aws_backup_selection.ec2" -> "aws_backup_plan.default";
  "aws_backup_selection.ec2" -> "aws_iam_role.backup_role";
  "aws_backup_selection.ec2" -> "aws_instance.mgmt";
  "aws_backup_selection.s3" -> "aws_backup_plan.default";
  "aws_backup_selection.s3" -> "aws_iam_role.backup_role";
  "aws_cloudwatch_metric_alarm.alb_4xx_high" -> "aws_lb.app_lb";
  "aws_cloudwatch_metric_alarm.cpu_high" -> "aws_autoscaling_group.app_asg";
  "aws_cloudwatch_metric_alarm.disk_high" -> "aws_autoscaling_group.app_asg";
  "aws_cloudwatch_metric_alarm.memory_high" -> "aws_autoscaling_group.app_asg";
  "aws_iam_role_policy_attachment.backup_policy" -> "aws_iam_role.backup_role";
  "aws_instance.mgmt" -> "data.aws_ami.rhel";
  "aws_instance.mgmt" -> "aws_security_group.mgmt_sg";
  "aws_instance.mgmt" -> "aws_subnet.mgmt_subnet";
  "aws_internet_gateway.igw" -> "aws_vpc.main";
  "aws_launch_template.app_lt" -> "data.aws_ami.rhel";
  "aws_launch_template.app_lt" -> "aws_security_group.app_sg";
  "aws_lb.app_lb" -> "aws_security_group.alb_sg";
  "aws_lb.app_lb" -> "aws_subnet.app_subnet_az1";
  "aws_lb.app_lb" -> "aws_subnet.app_subnet_az2";
  "aws_lb_listener.app_listener" -> "aws_lb.app_lb";
  "aws_lb_listener.app_listener" -> "aws_lb_target_group.app_tg";
  "aws_lb_target_group.app_tg" -> "aws_vpc.main";
  "aws_route_table.public" -> "aws_internet_gateway.igw";
  "aws_route_table_association.mgmt_assoc" -> "aws_route_table.public";
  "aws_route_table_association.mgmt_assoc" -> "aws_subnet.mgmt_subnet";
  "aws_security_group.alb_sg" -> "aws_vpc.main";
  "aws_security_group.app_sg" -> "aws_security_group.alb_sg";
  "aws_security_group.app_sg" -> "aws_security_group.mgmt_sg";
  "aws_security_group.mgmt_sg" -> "aws_vpc.main";
  "aws_subnet.app_subnet_az1" -> "aws_vpc.main";
  "aws_subnet.app_subnet_az2" -> "aws_vpc.main";
  "aws_subnet.backend_subnet" -> "aws_vpc.main";
  "aws_subnet.mgmt_subnet" -> "aws_vpc.main";
}

c:\svn\awstf>terraform plan
data.aws_ami.rhel: Reading...
data.aws_caller_identity.current: Reading...
data.aws_caller_identity.current: Read complete after 0s [id=255358890311]
data.aws_ami.rhel: Read complete after 0s [id=ami-01955109048f9b11d]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_autoscaling_group.app_asg will be created
  + resource "aws_autoscaling_group" "app_asg" {
      + arn                              = (known after apply)
      + availability_zones               = (known after apply)
      + default_cooldown                 = (known after apply)
      + desired_capacity                 = 2
      + force_delete                     = false
      + force_delete_warm_pool           = false
      + health_check_grace_period        = 300
      + health_check_type                = "EC2"
      + id                               = (known after apply)
      + ignore_failed_scaling_activities = false
      + load_balancers                   = (known after apply)
      + max_size                         = 6
      + metrics_granularity              = "1Minute"
      + min_size                         = 2
      + name                             = (known after apply)
      + name_prefix                      = (known after apply)
      + predicted_capacity               = (known after apply)
      + protect_from_scale_in            = false
      + region                           = "us-east-1"
      + service_linked_role_arn          = (known after apply)
      + target_group_arns                = (known after apply)
      + vpc_zone_identifier              = (known after apply)
      + wait_for_capacity_timeout        = "10m"
      + warm_pool_size                   = (known after apply)

      + availability_zone_distribution (known after apply)

      + capacity_reservation_specification (known after apply)

      + launch_template {
          + id      = (known after apply)
          + name    = (known after apply)
          + version = "$Latest"
        }

      + mixed_instances_policy (known after apply)

      + traffic_source (known after apply)
    }

  # aws_backup_plan.default will be created
  + resource "aws_backup_plan" "default" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + name     = "aws-backup-default-plan"
      + region   = "us-east-1"
      + tags_all = (known after apply)
      + version  = (known after apply)

      + rule {
          + completion_window            = 180
          + enable_continuous_backup     = false
          + rule_name                    = "daily-backup"
          + schedule                     = "cron(0 5 * * ? *)"
          + schedule_expression_timezone = "Etc/UTC"
          + start_window                 = 60
          + target_vault_name            = "aws-backup-default-vault"

          + lifecycle {
              + delete_after                              = 30
              + opt_in_to_archive_for_supported_resources = (known after apply)
            }
        }
    }

  # aws_backup_selection.asg will be created
  + resource "aws_backup_selection" "asg" {
      + iam_role_arn  = (known after apply)
      + id            = (known after apply)
      + name          = "asg-backup-selection"
      + not_resources = (known after apply)
      + plan_id       = (known after apply)
      + region        = "us-east-1"
      + resources     = (known after apply)

      + condition (known after apply)
    }

  # aws_backup_selection.ec2 will be created
  + resource "aws_backup_selection" "ec2" {
      + iam_role_arn  = (known after apply)
      + id            = (known after apply)
      + name          = "ec2-backup-selection"
      + not_resources = (known after apply)
      + plan_id       = (known after apply)
      + region        = "us-east-1"
      + resources     = (known after apply)

      + condition (known after apply)
    }

  # aws_backup_selection.s3 will be created
  + resource "aws_backup_selection" "s3" {
      + iam_role_arn  = (known after apply)
      + id            = (known after apply)
      + name          = "s3-backup-selection"
      + not_resources = (known after apply)
      + plan_id       = (known after apply)
      + region        = "us-east-1"
      + resources     = [
          + "arn:aws:s3:::accesslogs",
          + "arn:aws:s3:::backups",
          + "arn:aws:s3:::cloudtrail",
          + "arn:aws:s3:::config",
          + "arn:aws:s3:::elb-accesslogs",
          + "arn:aws:s3:::installs",
        ]

      + condition (known after apply)
    }

  # aws_backup_vault.default will be created
  + resource "aws_backup_vault" "default" {
      + arn             = (known after apply)
      + force_destroy   = false
      + id              = (known after apply)
      + kms_key_arn     = (known after apply)
      + name            = "aws-backup-default-vault"
      + recovery_points = (known after apply)
      + region          = "us-east-1"
      + tags_all        = (known after apply)
    }

  # aws_cloudwatch_metric_alarm.alb_4xx_high will be created
  + resource "aws_cloudwatch_metric_alarm" "alb_4xx_high" {
      + actions_enabled                       = true
      + alarm_name                            = "HighALB4xxErrors"
      + arn                                   = (known after apply)
      + comparison_operator                   = "GreaterThanThreshold"
      + dimensions                            = (known after apply)
      + evaluate_low_sample_count_percentiles = (known after apply)
      + evaluation_periods                    = 2
      + id                                    = (known after apply)
      + metric_name                           = "HTTPCode_ELB_4XX_Count"
      + namespace                             = "AWS/ApplicationELB"
      + period                                = 300
      + region                                = "us-east-1"
      + statistic                             = "Sum"
      + tags_all                              = (known after apply)
      + threshold                             = 10
      + treat_missing_data                    = "missing"
    }

  # aws_cloudwatch_metric_alarm.cpu_high will be created
  + resource "aws_cloudwatch_metric_alarm" "cpu_high" {
      + actions_enabled                       = true
      + alarm_name                            = "HighCPUUtilization"
      + arn                                   = (known after apply)
      + comparison_operator                   = "GreaterThanThreshold"
      + dimensions                            = (known after apply)
      + evaluate_low_sample_count_percentiles = (known after apply)
      + evaluation_periods                    = 2
      + id                                    = (known after apply)
      + metric_name                           = "CPUUtilization"
      + namespace                             = "AWS/EC2"
      + period                                = 300
      + region                                = "us-east-1"
      + statistic                             = "Average"
      + tags_all                              = (known after apply)
      + threshold                             = 80
      + treat_missing_data                    = "missing"
    }

  # aws_cloudwatch_metric_alarm.disk_high will be created
  + resource "aws_cloudwatch_metric_alarm" "disk_high" {
      + actions_enabled                       = true
      + alarm_name                            = "HighDiskUtilization"
      + arn                                   = (known after apply)
      + comparison_operator                   = "GreaterThanThreshold"
      + dimensions                            = (known after apply)
      + evaluate_low_sample_count_percentiles = (known after apply)
      + evaluation_periods                    = 2
      + id                                    = (known after apply)
      + metric_name                           = "disk_used_percent"
      + namespace                             = "CWAgent"
      + period                                = 300
      + region                                = "us-east-1"
      + statistic                             = "Average"
      + tags_all                              = (known after apply)
      + threshold                             = 80
      + treat_missing_data                    = "missing"
    }

  # aws_cloudwatch_metric_alarm.memory_high will be created
  + resource "aws_cloudwatch_metric_alarm" "memory_high" {
      + actions_enabled                       = true
      + alarm_name                            = "HighMemoryUtilization"
      + arn                                   = (known after apply)
      + comparison_operator                   = "GreaterThanThreshold"
      + dimensions                            = (known after apply)
      + evaluate_low_sample_count_percentiles = (known after apply)
      + evaluation_periods                    = 2
      + id                                    = (known after apply)
      + metric_name                           = "mem_used_percent"
      + namespace                             = "CWAgent"
      + period                                = 300
      + region                                = "us-east-1"
      + statistic                             = "Average"
      + tags_all                              = (known after apply)
      + threshold                             = 80
      + treat_missing_data                    = "missing"
    }

  # aws_iam_role.backup_role will be created
  + resource "aws_iam_role" "backup_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "backup.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "AWSBackupDefaultRole"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # aws_iam_role_policy_attachment.backup_policy will be created
  + resource "aws_iam_role_policy_attachment" "backup_policy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForBackup"
      + role       = "AWSBackupDefaultRole"
    }

  # aws_instance.mgmt will be created
  + resource "aws_instance" "mgmt" {
      + ami                                  = "ami-01955109048f9b11d"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = true
      + availability_zone                    = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + enable_primary_ipv6                  = (known after apply)
      + force_destroy                        = false
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "Key"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + region                               = "us-east-1"
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name" = "mgmt-instance"
        }
      + tags_all                             = {
          + "Name" = "mgmt-instance"
        }
      + tenancy                              = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification (known after apply)

      + cpu_options (known after apply)

      + ebs_block_device (known after apply)

      + enclave_options (known after apply)

      + ephemeral_block_device (known after apply)

      + instance_market_options (known after apply)

      + maintenance_options (known after apply)

      + metadata_options (known after apply)

      + network_interface (known after apply)

      + private_dns_name_options (known after apply)

      + root_block_device (known after apply)
    }

  # aws_internet_gateway.igw will be created
  + resource "aws_internet_gateway" "igw" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + region   = "us-east-1"
      + tags_all = (known after apply)
      + vpc_id   = (known after apply)
    }

  # aws_launch_template.app_lt will be created
  + resource "aws_launch_template" "app_lt" {
      + arn                    = (known after apply)
      + default_version        = (known after apply)
      + id                     = (known after apply)
      + image_id               = "ami-01955109048f9b11d"
      + instance_type          = "t2.micro"
      + key_name               = "Key"
      + latest_version         = (known after apply)
      + name                   = (known after apply)
      + name_prefix            = "app-template-"
      + region                 = "us-east-1"
      + tags_all               = (known after apply)
      + user_data              = <<-EOT
            #!/bin/bash
            yum update -y
            yum install -y httpd amazon-cloudwatch-agent
            systemctl enable httpd
            systemctl start httpd
            echo "Howdy, pilgrim." > /var/www/html/index.html
            cat <<EOC > /opt/aws/amazon-cloudwatch-agent/bin/config.json
            {
              "metrics": {
                "metrics_collected": {
                  "mem": { "measurement": ["mem_used_percent"] },
                  "disk": { "measurement": ["disk_used_percent"], "resources": ["*"] }
                }
              }
            }
            EOC
            /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/bin/config.json -s
        EOT
      + vpc_security_group_ids = (known after apply)

      + metadata_options (known after apply)
    }

  # aws_lb.app_lb will be created
  + resource "aws_lb" "app_lb" {
      + arn                                                          = (known after apply)
      + arn_suffix                                                   = (known after apply)
      + client_keep_alive                                            = 3600
      + desync_mitigation_mode                                       = "defensive"
      + dns_name                                                     = (known after apply)
      + drop_invalid_header_fields                                   = false
      + enable_deletion_protection                                   = false
      + enable_http2                                                 = true
      + enable_tls_version_and_cipher_suite_headers                  = false
      + enable_waf_fail_open                                         = false
      + enable_xff_client_port                                       = false
      + enable_zonal_shift                                           = false
      + enforce_security_group_inbound_rules_on_private_link_traffic = (known after apply)
      + id                                                           = (known after apply)
      + idle_timeout                                                 = 60
      + internal                                                     = false
      + ip_address_type                                              = (known after apply)
      + load_balancer_type                                           = "application"
      + name                                                         = "app-lb"
      + name_prefix                                                  = (known after apply)
      + preserve_host_header                                         = false
      + region                                                       = "us-east-1"
      + security_groups                                              = (known after apply)
      + subnets                                                      = (known after apply)
      + tags_all                                                     = (known after apply)
      + vpc_id                                                       = (known after apply)
      + xff_header_processing_mode                                   = "append"
      + zone_id                                                      = (known after apply)

      + subnet_mapping (known after apply)
    }

  # aws_lb_listener.app_listener will be created
  + resource "aws_lb_listener" "app_listener" {
      + arn                                                                   = (known after apply)
      + id                                                                    = (known after apply)
      + load_balancer_arn                                                     = (known after apply)
      + port                                                                  = 80
      + protocol                                                              = "HTTP"
      + region                                                                = "us-east-1"
      + routing_http_request_x_amzn_mtls_clientcert_header_name               = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_issuer_header_name        = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_leaf_header_name          = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_serial_number_header_name = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_subject_header_name       = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_validity_header_name      = (known after apply)
      + routing_http_request_x_amzn_tls_cipher_suite_header_name              = (known after apply)
      + routing_http_request_x_amzn_tls_version_header_name                   = (known after apply)
      + routing_http_response_access_control_allow_credentials_header_value   = (known after apply)
      + routing_http_response_access_control_allow_headers_header_value       = (known after apply)
      + routing_http_response_access_control_allow_methods_header_value       = (known after apply)
      + routing_http_response_access_control_allow_origin_header_value        = (known after apply)
      + routing_http_response_access_control_expose_headers_header_value      = (known after apply)
      + routing_http_response_access_control_max_age_header_value             = (known after apply)
      + routing_http_response_content_security_policy_header_value            = (known after apply)
      + routing_http_response_server_enabled                                  = (known after apply)
      + routing_http_response_strict_transport_security_header_value          = (known after apply)
      + routing_http_response_x_content_type_options_header_value             = (known after apply)
      + routing_http_response_x_frame_options_header_value                    = (known after apply)
      + ssl_policy                                                            = (known after apply)
      + tags_all                                                              = (known after apply)
      + tcp_idle_timeout_seconds                                              = (known after apply)

      + default_action {
          + order            = (known after apply)
          + target_group_arn = (known after apply)
          + type             = "forward"
        }

      + mutual_authentication (known after apply)
    }

  # aws_lb_target_group.app_tg will be created
  + resource "aws_lb_target_group" "app_tg" {
      + arn                                = (known after apply)
      + arn_suffix                         = (known after apply)
      + connection_termination             = (known after apply)
      + deregistration_delay               = "300"
      + id                                 = (known after apply)
      + ip_address_type                    = (known after apply)
      + lambda_multi_value_headers_enabled = false
      + load_balancer_arns                 = (known after apply)
      + load_balancing_algorithm_type      = (known after apply)
      + load_balancing_anomaly_mitigation  = (known after apply)
      + load_balancing_cross_zone_enabled  = (known after apply)
      + name                               = "app-tg"
      + name_prefix                        = (known after apply)
      + port                               = 80
      + preserve_client_ip                 = (known after apply)
      + protocol                           = "HTTP"
      + protocol_version                   = (known after apply)
      + proxy_protocol_v2                  = false
      + region                             = "us-east-1"
      + slow_start                         = 0
      + tags_all                           = (known after apply)
      + target_type                        = "instance"
      + vpc_id                             = (known after apply)

      + health_check {
          + enabled             = true
          + healthy_threshold   = 5
          + interval            = 30
          + matcher             = "200"
          + path                = "/"
          + port                = "traffic-port"
          + protocol            = "HTTP"
          + timeout             = 5
          + unhealthy_threshold = 2
        }

      + stickiness (known after apply)

      + target_failover (known after apply)

      + target_group_health (known after apply)

      + target_health_state (known after apply)
    }

  # aws_route_table.public will be created
  + resource "aws_route_table" "public" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + region           = "us-east-1"
      + route            = [
          + {
              + cidr_block                 = "0.0.0.0/0"
              + gateway_id                 = (known after apply)
                # (11 unchanged attributes hidden)
            },
        ]
      + tags_all         = (known after apply)
      + vpc_id           = (known after apply)
    }

  # aws_route_table_association.mgmt_assoc will be created
  + resource "aws_route_table_association" "mgmt_assoc" {
      + id             = (known after apply)
      + region         = "us-east-1"
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_security_group.alb_sg will be created
  + resource "aws_security_group" "alb_sg" {
      + arn                    = (known after apply)
      + description            = "Allow HTTP from internet"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
                # (1 unchanged attribute hidden)
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "Allow HTTP"
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
            },
        ]
      + name                   = "alb-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + region                 = "us-east-1"
      + revoke_rules_on_delete = false
      + tags_all               = (known after apply)
      + vpc_id                 = (known after apply)
    }

  # aws_security_group.app_sg will be created
  + resource "aws_security_group" "app_sg" {
      + arn                    = (known after apply)
      + description            = "Allow web from ALB and SSH from mgmt"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
                # (1 unchanged attribute hidden)
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = []
              + description      = "Allow HTTP from ALB"
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = (known after apply)
              + self             = false
              + to_port          = 80
            },
          + {
              + cidr_blocks      = []
              + description      = "Allow SSH from mgmt instance"
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = (known after apply)
              + self             = false
              + to_port          = 22
            },
        ]
      + name                   = "app-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + region                 = "us-east-1"
      + revoke_rules_on_delete = false
      + tags_all               = (known after apply)
      + vpc_id                 = (known after apply)
    }

  # aws_security_group.mgmt_sg will be created
  + resource "aws_security_group" "mgmt_sg" {
      + arn                    = (known after apply)
      + description            = "Allow SSH from fixed IP"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
                # (1 unchanged attribute hidden)
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "9.9.9.9/32",
                ]
              + description      = "SSH from fixed IP"
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
        ]
      + name                   = "mgmt-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + region                 = "us-east-1"
      + revoke_rules_on_delete = false
      + tags_all               = (known after apply)
      + vpc_id                 = (known after apply)
    }

  # aws_subnet.app_subnet_az1 will be created
  + resource "aws_subnet" "app_subnet_az1" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.1.1.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + region                                         = "us-east-1"
      + tags                                           = {
          + "Name" = "app-subnet-az1"
        }
      + tags_all                                       = {
          + "Name" = "app-subnet-az1"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_subnet.app_subnet_az2 will be created
  + resource "aws_subnet" "app_subnet_az2" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.1.2.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + region                                         = "us-east-1"
      + tags                                           = {
          + "Name" = "app-subnet-az2"
        }
      + tags_all                                       = {
          + "Name" = "app-subnet-az2"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_subnet.backend_subnet will be created
  + resource "aws_subnet" "backend_subnet" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.1.4.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + region                                         = "us-east-1"
      + tags                                           = {
          + "Name" = "backend-subnet"
        }
      + tags_all                                       = {
          + "Name" = "backend-subnet"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_subnet.mgmt_subnet will be created
  + resource "aws_subnet" "mgmt_subnet" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.1.3.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + region                                         = "us-east-1"
      + tags                                           = {
          + "Name" = "mgmt-subnet"
        }
      + tags_all                                       = {
          + "Name" = "mgmt-subnet"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_vpc.main will be created
  + resource "aws_vpc" "main" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.1.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_dns_hostnames                 = true
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + region                               = "us-east-1"
      + tags                                 = {
          + "Name" = "main-vpc"
        }
      + tags_all                             = {
          + "Name" = "main-vpc"
        }
    }

Plan: 28 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + alb_dns_name    = (known after apply)
  + mgmt_public_ip  = (known after apply)
  + success_message = (known after apply)

───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform apply" now.

c:\svn\awstf>